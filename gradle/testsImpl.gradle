apply from: 'fabricTests.gradle'

tests.configure {
	it.client.addAll([
		'bedrockify',
		'enhancedblockentities',
		'fabric key binding api v1',
		'fabric lifecycle events v1',
		'fabric renderer api v1',
		'iris',
		'modmenu',
		'sodium',
		'spruceui'
	])

	it.shouldIgnore = { composition ->
		return composition.contains('iris') && (composition.contains('fabric key binding api v1') || !composition.contains('sodium')) ||
		       composition.containsAll(['spruceui', 'fabric lifecycle events v1']) ||
		       composition.contains('enhancedblockentities') && (composition.contains('fabric key binding api v1') || composition.contains('fabric lifecycle events v1') || composition.contains('fabric renderer api v1'))
	}

	it.initialize()
}

//loom.runConfigs.configureEach { property 'mixin.debug.export', 'true' }

dependencies {
	// Quiltflower
	runtimeOnly libs.quiltflower

	// BedrockIfy
	bedrockifyTestRuntimeOnly libs.bedrockify

	// Enhanced Block Entities
	enhancedblockentitiesTestRuntimeOnly libs.enhancedblockentities

	// Fabric API
	enhancedblockentitiesTestRuntimeOnly libs.fabric.api

	// Fabric Key Binding API (V1)
	fabricKeyBindingApiV1TestRuntimeOnly fabricApi.module('fabric-key-binding-api-v1', libs.versions.fabric.api.get())

	// Fabric Lifecycle Events (V1)
	fabricLifecycleEventsV1TestRuntimeOnly fabricApi.module('fabric-lifecycle-events-v1', libs.versions.fabric.api.get())

	// Fabric Renderer API (V1)
	fabricRendererApiV1TestRuntimeOnly fabricApi.module('fabric-renderer-api-v1', libs.versions.fabric.api.get())

	// Iris
	irisTestRuntimeOnly libs.iris

	// ModMenu
	modmenuTestRuntimeOnly libs.modmenu
	
	// Sodium
	sodiumTestRuntimeOnly libs.sodium
	
	// SpruceUI
	spruceuiTestRuntimeOnly libs.spruceui

	// Sodium
	sodiumTestRuntimeOnly libs.sodium
}
